#!/usr/bin/env node

const chalk = require('chalk');
const program = require('commander');

const pjson = require('../package.json');
const { makeOprah } = require('../lib/make-oprah');
const { logError, log } = require('../lib/utils/logger');

let oprahPromise = null;

program
  .version(pjson.version)
  .option('-s, --stage [stage]', 'Specify stage to run on. (required)')
  .option('-c, --config [config]', 'Path to oprah configuration', 'oprah.yml');

program
  .command('run')
  .description('Verify or populate all remote configurations and secrets.')
  .option(
    '-v, --variables [variables]',
    'Variables used for config interpolation.'
  )
  .option('-i, --interactive', 'Run on interactive mode')
  .option('-m, --missing', 'Only prompt missing values in interactive mode')
  .action(({ interactive, variables, missing }) => {
    let parsedVariables = {};

    try {
      if (variables) {
        parsedVariables = JSON.parse(variables);
      }
    } catch (error) {
      logError(`Variables must be in JSON format!! ${error.message}.`);
      program.help();
    }

    const { stage, config } = program.opts();

    const params = {
      stage,
      interactive,
      missingOnly: missing,
      config,
      variables: parsedVariables
    };

    oprahPromise = makeOprah(params).run();
  });

program
  .command('init')
  .description('Initialize oprah. Only required to run once.')
  .action(() => {
    const { stage, config } = program.opts();

    oprahPromise = makeOprah({ stage, config }).init();
  });

program
  .command('export')
  .description(
    'Export of all of the configuration from the provider to a text json file'
  )
  .option(
    '-p, --path [path]',
    'The location for the output secrets & configuration file (default: "/tmp/oprah-exports.json")'
  )
  .action(({ path }) => {
    const { stage, config } = program.opts();
    oprahPromise = makeOprah({ stage, config }).export(
      path || '/tmp/oprah-exports.json'
    );
  });

program
  .command('import')
  .description(
    'Import all of the configuration from the json from to a provider'
  )
  .option(
    '-p, --path [path]',
    'The location of the secrets and configuration file (default: "/tmp/oprah-exports.json")'
  )
  .action(({ path }) => {
    const { stage, config } = program.opts();
    oprahPromise = makeOprah({ stage, config }).import(
      path || '/tmp/oprah-exports.json'
    );
  });

program
  .command('list')
  .description('List all remote configurations and secrets.')
  .action(() => {
    const { stage, config } = program.opts();
    oprahPromise = makeOprah({ stage, config }).list();
  });

program
  .command('fetch')
  .description('Fetch config or secret')
  .option(
    '-k, --keys [keys]',
    'Comma seperated configs to fetch (example: "SOME_CONFIG,ANOTHER_CONFIG")'
  )
  .action(({ keys }) => {
    const { stage, config } = program.opts();
    oprahPromise = makeOprah({ stage, config }).fetch({
      keys: keys.split(',')
    });
  });

function displayHelpAndExit() {
  program.help();
  process.exit(1);
}

program.on('command:*', () => {
  logError(`Invalid command - ${program.args.join()}`);
  displayHelpAndExit();
});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  displayHelpAndExit();
}

if (!program.opts().stage) {
  logError('Invalid options!! You must specify stage.');
  displayHelpAndExit();
}

if (!oprahPromise) {
  logError('Invalid command!! At least one command must be executed.');
  displayHelpAndExit();
}

oprahPromise
  .then(() => log(chalk.green('Done.')))
  .catch(err => {
    logError(err);
    process.exit(1);
  });
