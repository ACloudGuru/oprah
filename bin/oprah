#!/usr/bin/env node

'use strict'

const chalk = require('chalk');
const pjson = require('../package.json');
const program = require('commander');
const Bluebird = require('bluebird');
const { makeOprah } = require('../lib/make-oprah');
const { logError, log } = require('../lib/utils/logger');

let oprahPromise = null;

program
  .version(pjson.version)
  .option('-s, --stage [stage]', 'Specify stage to run on. (required)')
  .option('-c, --config [config]', 'Path to oprah configuration', 'oprah.yml');

program
  .command('run')
  .description('Verify or populate all remote configurations and secrets.')
  .option('-v, --variables [variables]', 'Variables used for config interpolation.')
  .option('-i, --interactive', 'Run on interactive mode')
  .action(({ interactive, variables }) => {
    let parsedVariables = {};

    try {
      if (variables) {
        parsedVariables = JSON.parse(variables);
      }
    } catch(error) {
      logError(`Variables must be in JSON format!! ${error.message}.`);
      program.help();
    }

    const params = {
      stage: program.stage,
      interactive,
      config: program.config,
      variables: parsedVariables
    };

    oprahPromise = makeOprah(params).run();
  });

program
  .command('init')
  .description('Initialize oprah. Only required to run once.')
  .action(() => {
    const params = {
      stage: program.stage,
      config: program.config,
    };

    oprahPromise = makeOprah(params).init();
  });

program
  .command('export')
  .description('Export of all of the configuration from the provider to a text json file')
  .option('-p, --path [path]', 'The location for the output secrets & configuration file (default: "/tmp/oprah-exports.json")')
  .action(({ path }) => {
    const params = {
      stage: program.stage,
      config: program.config,
    };

    oprahPromise = makeOprah(params)
      .export(path || '/tmp/oprah-exports.json');
  });

program
  .command('import')
  .description('Import all of the configuration from the json from to a provider')
  .option('-p, --path [path]', 'The location of the secrets and configuration file (default: "/tmp/oprah-exports.json")')
  .action(({ path }) => {
    const params = {
      stage: program.stage,
      config: program.config,
    };

    oprahPromise = makeOprah(params)
      .import(path || '/tmp/oprah-exports.json');
  });

program
  .command('list')
  .description('List all remote configurations and secrets.')
  .action(() => {
    const params = {
      stage: program.stage,
      config: program.config,
    };

    oprahPromise = makeOprah(params).list();
  });

function displayHelpAndExit() {
  program.help();
  process.exit(1);
}

program.on('command:*', () => {
  logError(`Invalid command - ${program.args.join()}`);
  displayHelpAndExit();
});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  displayHelpAndExit();
}

if (!program.stage) {
  logError('Invalid options!! You must specify stage.');
  displayHelpAndExit();
}

if (!oprahPromise) {
  logError('Invalid command!! At least one command must be executed.');
  displayHelpAndExit();
}

oprahPromise
  .tap(() => log(chalk.green('Done.')))
  .catch(err => {
    logError(err)
    process.exit(1);
  });
